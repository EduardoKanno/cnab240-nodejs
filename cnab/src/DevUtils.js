// Generated by CoffeeScript 2.1.1
(function() {
  var DevUtils, _, expect, rules;

  rules = require('../../layout/Rules');

  expect = require('expect.js');

  _ = require('lodash');

  DevUtils = class DevUtils {
    constructor(bank, type) {
      this.validateFieldsLength = this.validateFieldsLength.bind(this);
      this.rules = {
        ArquivoHeader: rules[bank].ArquivoHeader,
        ArquivoTrailing: rules[bank].ArquivoTrailing,
        LoteHeader: rules[bank][type].LoteHeader,
        LoteTrailing: rules[bank][type].LoteTrailing,
        Detail: rules[bank][type].Detail,
        Detail2: rules[bank][type].Detail2
      };
    }

    getRequired() {
      var key, ref, required, results, subject;
      ref = this.rules;
      results = [];
      for (key in ref) {
        subject = ref[key];
        this._log('---------------------');
        this._log(`Required for ${key}`);
        required = _.filter(subject, {
          required: true
        }).map(function(item) {
          if (item.default == null) {
            return {
              [`${item.field}`]: _.pick(item, ['type', 'length', 'default'])
            };
          }
        });
        results.push(this._log(JSON.stringify(_.compact(required), null, 4)));
      }
      return results;
    }

    getAllFields() {
      var key, ref, required, results, subject;
      ref = this.rules;
      results = [];
      for (key in ref) {
        subject = ref[key];
        this._log('---------------------');
        this._log(`Fields for ${key}`);
        results.push(required = _.map(subject, function(item) {
          return {
            [`${item.field}`]: _.pick(item, ['type', 'length', 'default'])
          };
        }));
      }
      return results;
    }

    // @_log required
    extract(sections, fileString) {
      var fileSections, merged;
      fileSections = fileString.split('\n');
      _.each(fileSections, function(section) {
        return expect(section.length).to.be(240);
      });
      merged = _.reduce(sections, (parsed, section, index) => {
        var content, sectionData;
        rules = this.rules[section];
        content = fileSections[index];
        sectionData = _.reduce(rules, function(extracted, rule) {
          extracted.push({
            [`${rule.field}`]: content != null ? content.split('').slice(rule.startPos - 1, rule.endPos).join('') : void 0
          });
          return extracted;
        }, []);
        parsed[section] = sectionData;
        return parsed;
      }, {});
      return merged;
    }

    validate() {
      var key, ref, results, subject, total;
      ref = this.rules;
      results = [];
      for (key in ref) {
        subject = ref[key];
        expect(subject).not.to.be(void 0);
        this._log('---------------------');
        this._log(`Testing ${key}`);
        total = _.reduce(subject, (control, value) => {
          this._stdout(`Testing field ${value.field}... `);
          expect(value.startPos).to.be(control.lastPos + 1);
          expect(value.endPos - value.startPos + 1).to.be(value.length);
          this._stdout("done.\n");
          control.lastPos = value.endPos;
          control.totalLength += value.length;
          return control;
        }, {
          totalLength: 0,
          lastPos: 0
        });
        results.push(expect(total.totalLength).to.be(240));
      }
      return results;
    }

    validateFieldsLength(fileData) {
      var sections;
      sections = _.keys(this.rules);
      return _.each(sections, (section) => {
        var fieldsConfig, sectionTotalLength;
        fieldsConfig = this.rules[section];
        sectionTotalLength = 0;
        _.each(fieldsConfig, function(config) {
          var dataField;
          dataField = _.find(fileData[section], config.field);
          _.pull(fileData[section], dataField);
          // console.log "Checking #{section}.#{config.field} length. Expected: #{config.length}, got: #{dataField[config.field].length}"
          expect(dataField[config.field].length).to.be(config.length);
          return sectionTotalLength += dataField[config.field].length;
        });
        // console.log "Checking section '#{section}' total length... expected 240, got #{sectionTotalLength}"
        return expect(sectionTotalLength).to.be(240);
      });
    }

    _log(msg) {}

    // console.log msg
    _stdout(msg) {
      return process.stdout.write(msg);
    }

  };

  module.exports = DevUtils;

}).call(this);
