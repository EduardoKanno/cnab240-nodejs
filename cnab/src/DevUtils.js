// Generated by CoffeeScript 1.10.0
(function() {
  var DevUtils, _, expect, rules,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  rules = require('../../layout/Rules');

  expect = require('expect.js');

  _ = require('lodash');

  DevUtils = (function() {
    function DevUtils(bank, type) {
      this.validateFieldsLength = bind(this.validateFieldsLength, this);
      this.rules = {
        ArquivoHeader: rules[bank].ArquivoHeader,
        ArquivoTrailing: rules[bank].ArquivoTrailing,
        LoteHeader: rules[bank][type].LoteHeader,
        LoteTrailing: rules[bank][type].LoteTrailing,
        Detail: rules[bank][type].Detail,
        Detail2: rules[bank][type].Detail2
      };
    }

    DevUtils.prototype.getRequired = function() {
      var key, ref, required, results, subject;
      ref = this.rules;
      results = [];
      for (key in ref) {
        subject = ref[key];
        this._log('---------------------');
        this._log("Required for " + key);
        required = _.filter(subject, {
          required: true
        }).map(function(item) {
          var obj;
          if (item["default"] == null) {
            return (
              obj = {},
              obj["" + item.field] = _.pick(item, ['type', 'length', 'default']),
              obj
            );
          }
        });
        results.push(this._log(JSON.stringify(_.compact(required), null, 4)));
      }
      return results;
    };

    DevUtils.prototype.getAllFields = function() {
      var key, ref, required, results, subject;
      ref = this.rules;
      results = [];
      for (key in ref) {
        subject = ref[key];
        this._log('---------------------');
        this._log("Fields for " + key);
        results.push(required = _.map(subject, function(item) {
          var obj;
          return (
            obj = {},
            obj["" + item.field] = _.pick(item, ['type', 'length', 'default']),
            obj
          );
        }));
      }
      return results;
    };

    DevUtils.prototype.extract = function(sections, fileString) {
      var fileSections, merged;
      fileSections = fileString.split('\n');
      _.each(fileSections, function(section) {
        return expect(section.length).to.be(240);
      });
      merged = _.reduce(sections, (function(_this) {
        return function(parsed, section, index) {
          var content, sectionData;
          rules = _this.rules[section];
          content = fileSections[index];
          sectionData = _.reduce(rules, function(extracted, rule) {
            var obj;
            extracted.push((
              obj = {},
              obj["" + rule.field] = content != null ? content.split('').slice(rule.startPos - 1, rule.endPos).join('') : void 0,
              obj
            ));
            return extracted;
          }, []);
          parsed[section] = sectionData;
          return parsed;
        };
      })(this), {});
      return merged;
    };

    DevUtils.prototype.validate = function() {
      var key, ref, results, subject, total;
      ref = this.rules;
      results = [];
      for (key in ref) {
        subject = ref[key];
        expect(subject).not.to.be(void 0);
        this._log('---------------------');
        this._log("Testing " + key);
        total = _.reduce(subject, (function(_this) {
          return function(control, value) {
            _this._stdout("Testing field " + value.field + "... ");
            expect(value.startPos).to.be(control.lastPos + 1);
            expect(value.endPos - value.startPos + 1).to.be(value.length);
            _this._stdout("done.\n");
            control.lastPos = value.endPos;
            control.totalLength += value.length;
            return control;
          };
        })(this), {
          totalLength: 0,
          lastPos: 0
        });
        results.push(expect(total.totalLength).to.be(240));
      }
      return results;
    };

    DevUtils.prototype.validateFieldsLength = function(fileData) {
      var sections;
      sections = _.keys(this.rules);
      return _.each(sections, (function(_this) {
        return function(section) {
          var fieldsConfig, sectionTotalLength;
          fieldsConfig = _this.rules[section];
          sectionTotalLength = 0;
          _.each(fieldsConfig, function(config) {
            var dataField;
            dataField = _.find(fileData[section], config.field);
            _.pull(fileData[section], dataField);
            expect(dataField[config.field].length).to.be(config.length);
            return sectionTotalLength += dataField[config.field].length;
          });
          return expect(sectionTotalLength).to.be(240);
        };
      })(this));
    };

    DevUtils.prototype._log = function(msg) {};

    DevUtils.prototype._stdout = function(msg) {
      return process.stdout.write(msg);
    };

    return DevUtils;

  })();

  module.exports = DevUtils;

}).call(this);
