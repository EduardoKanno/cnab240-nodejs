// Generated by CoffeeScript 1.10.0
(function() {
  var Joi, Remessa, Rules, Utils, _, expect, removeAccents;

  Rules = require('../../layout/Rules');

  Utils = require('./Utils');

  Joi = require('joi');

  expect = require('expect.js');

  _ = require('lodash');

  removeAccents = require('remove-accents');

  Remessa = (function() {
    var DETAIL, DETAIL2, FILE_HEADER, FILE_SECTIONS, FILE_TRAILING, LOT_HEADER, LOT_TRAILING;

    FILE_HEADER = 'ArquivoHeader';

    FILE_TRAILING = 'ArquivoTrailing';

    LOT_HEADER = 'LoteHeader';

    LOT_TRAILING = 'LoteTrailing';

    DETAIL = 'Detail';

    DETAIL2 = 'Detail2';

    FILE_SECTIONS = [FILE_HEADER, LOT_HEADER, DETAIL, DETAIL2, LOT_TRAILING, FILE_TRAILING];

    function Remessa(bank, type, deps) {
      var ref, ref1, ref2, ref3, ref4, rules;
      rules = (deps != null ? deps.Rules : void 0) || Rules;
      if (bank == null) {
        throw new Error('Bank is mandatory');
      }
      if (type == null) {
        throw new Error('Type is mandatory');
      }
      this.rules = {
        ArquivoHeader: rules[bank].ArquivoHeader,
        ArquivoTrailing: rules[bank].ArquivoTrailing,
        LoteHeader: (ref = rules[bank][type]) != null ? ref.LoteHeader : void 0,
        LoteTrailing: (ref1 = rules[bank][type]) != null ? ref1.LoteTrailing : void 0,
        Detail: (ref2 = rules[bank][type]) != null ? ref2.Detail : void 0,
        Detail2: (ref3 = rules[bank][type]) != null ? ref3.Detail2 : void 0
      };
      this.CONSTANTS = (ref4 = rules[bank][type]) != null ? ref4.Constants : void 0;
    }

    Remessa.prototype.validateLenghts = function(rulesName, userValues) {
      var ref, ref1, ref2, rules, validation;
      if (rulesName == null) {
        throw new Error('RulesName is mandatory');
      }
      if (userValues == null) {
        throw new Error('UserValues is mandatory');
      }
      rules = _.reduce(this.rules[rulesName], function(rules, fieldConfig) {
        var rule;
        rule = Joi.string().max(fieldConfig.length);
        if (fieldConfig.required && (fieldConfig["default"] == null)) {
          rule = rule.required();
        }
        rules[fieldConfig.field] = rule;
        return rules;
      }, {});
      rules.section = Joi.string().optional();
      validation = (ref = Joi.validate(userValues, Joi.object(rules), {
        abortEarly: false
      })) != null ? (ref1 = ref.error) != null ? (ref2 = ref1.details) != null ? ref2.map(function(error) {
        return error.message;
      }) : void 0 : void 0 : void 0;
      if (!_.isEmpty(validation)) {
        throw new Error(validation);
      }
      return _.each(_.filter(this.rules[rulesName], 'default'), function(config) {
        if (config["default"].toString().length !== config.length) {
          throw new Error(rulesName + "." + config.field + " length must be less than or equal to " + config.length + " characters long");
        }
      });
    };

    Remessa.prototype.prepare = function(rulesName, validated) {
      var fieldConfig, key, rules, utils, value;
      utils = new Utils;
      rules = _.cloneDeep(this.rules[rulesName]);
      for (key in validated) {
        value = validated[key];
        fieldConfig = _.find(rules, {
          field: key
        });
        if (fieldConfig != null) {
          fieldConfig.value = value;
        }
      }
      return _.map(rules, function(item) {
        var meaninglessChar;
        if ((item["default"] != null) && (item.value == null)) {
          return item;
        }
        if (item.value == null) {
          meaninglessChar = item.type === 'alphanumeric' ? ' ' : '0';
          item.value = new Array(item.length).fill(meaninglessChar).join('');
        }
        item.value = (item.type != null) && item.type === 'alphanumeric' ? utils.padString(item) : utils.padNumber(item);
        return item;
      });
    };

    Remessa.prototype.build = function(prepared) {
      var base;
      base = Array(240);
      _.map(prepared, function(fieldConfig) {
        var args, fieldValue, ref, ref1;
        fieldValue = ((ref = fieldConfig.value) != null ? ref.toString() : void 0) || ((ref1 = fieldConfig["default"]) != null ? ref1.toString() : void 0);
        args = [fieldConfig.startPos, fieldConfig.length].concat(fieldValue.toString().split(''));
        return base.splice.apply(base, args).join('');
      });
      base.shift();
      return base.join('');
    };

    Remessa.prototype.process = function(userValues, fileSections, newLine) {
      var missingKeys, remessa, sections, valuesArr;
      if (newLine == null) {
        newLine = '\n';
      }
      if (FILE_SECTIONS == null) {
        FILE_SECTIONS = fileSections;
      }
      missingKeys = _.difference(FILE_SECTIONS, _.keys(userValues));
      if (!_.isEmpty(missingKeys)) {
        throw Error("Missing file sections: " + (missingKeys.join(', ')));
      }
      valuesArr = _.map(FILE_SECTIONS, function(section) {
        if (section === DETAIL && _.isArray(userValues[section])) {
          return _.map(userValues[section], function(subsection) {
            subsection[0].section = section;
            return subsection;
          });
        } else {
          userValues[section].section = section;
          return userValues[section];
        }
      });
      sections = _.flattenDeep(valuesArr);
      remessa = _.map(sections, (function(_this) {
        return function(section) {
          var sectionKey, sectionValues;
          sectionKey = section.section;
          sectionValues = _.omit(section, 'section');
          _this.validateLenghts(sectionKey, sectionValues);
          return _this.build(_this.prepare(sectionKey, sectionValues));
        };
      })(this));
      return removeAccents(remessa.join(newLine) + newLine);
    };

    return Remessa;

  })();

  module.exports = Remessa;

}).call(this);
