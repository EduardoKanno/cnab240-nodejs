// Generated by CoffeeScript 2.1.1
(function() {
  var Retorno, _, expect, rules;

  _ = require('lodash');

  expect = require('expect.js');

  rules = require('../../layout/Rules');

  Retorno = (function() {
    /*
        JSON ouput structure:

        ArquivoHeader: {}
        lots: [
            {
                LoteHeader: {}
                details: [
                    [
                        {
                            Segment1: {}
                            Segment2: {}
                        }
                    ]
                    [
                        {
                            Segment1: {}
                            Segment2: {}
                        }
                    ]
                ]
                LoteTrailing: {}
            }
        ]
        ArquivoTrailing: {}

    */
    var DETAIL, DETAIL2, FILE_HEADER, FILE_SECTIONS, FILE_TRAILING, LOT_HEADER, LOT_TRAILING;

    class Retorno {
      constructor(bank, type) {
        var ref, ref1, ref2, ref3, ref4;
        if (bank == null) {
          throw new Error('Bank is mandatory');
        }
        if (type == null) {
          throw new Error('Type is mandatory');
        }
        this.rules = {
          ArquivoHeader: rules[bank].ArquivoHeader,
          ArquivoTrailing: rules[bank].ArquivoTrailing,
          LoteHeader: (ref = rules[bank][type]) != null ? ref.LoteHeader : void 0,
          LoteTrailing: (ref1 = rules[bank][type]) != null ? ref1.LoteTrailing : void 0,
          Detail: (ref2 = rules[bank][type]) != null ? ref2.Detail : void 0,
          Detail2: (ref3 = rules[bank][type]) != null ? ref3.Detail2 : void 0
        };
        this.CONSTANTS = (ref4 = rules[bank][type]) != null ? ref4.Constants : void 0;
      }

      extractSingleField(line, rule) {
        return line != null ? line.split('').slice(rule.startPos - 1, rule.endPos).join('') : void 0;
      }

      // this method mutates {lines}
      extractSection(lines, sectionName, sectionCode) {
        var line, registryRule;
        registryRule = _.find(this.rules[sectionName], {
          field: this.CONSTANTS[sectionName].REGISTRY_FIELD
        });
        line = _.filter(lines, function(line) {
          return (line != null ? line.split('').slice(registryRule.startPos - 1, registryRule.endPos).join('') : void 0) === sectionCode;
        });
        _.pull(lines, line[0]);
        return line[0];
      }

      extractBulk(lines, rule, condition) {
        return _.reduce(lines, (memo, line) => {
          var currentPos, ref;
          currentPos = memo.length === 0 ? 0 : memo.length - 1;
          if (this.extractSingleField(line, rule) === condition) {
            memo.push([]);
            memo[memo.length - 1].push(line);
          } else {
            if ((ref = memo[currentPos]) != null) {
              ref.push(line);
            }
          }
          return memo;
        }, []);
      }

      numberOf(fileTrailingLine, sectionName, registryField) {
        var lotNumRule;
        lotNumRule = _.find(this.rules[sectionName], {
          field: registryField
        });
        return parseInt(this.extractSingleField(fileTrailingLine, lotNumRule) || 0);
      }

      extractFields(line, sectionName) {
        var localRules;
        localRules = this.rules[sectionName];
        return _.reduce(localRules, (extracted, rule) => {
          extracted[`${rule.field}`] = this.extractSingleField(line, rule);
          return extracted;
        }, {});
      }

      extractSegments(detailLines) {
        var detailSegmentCodeRule;
        detailSegmentCodeRule = _.find(this.rules.Detail, {
          field: 'cod_seg_registro_lote'
        });
        return _.reduce(detailLines, (memo, detailLine) => {
          var segmentCode;
          segmentCode = this.extractSingleField(detailLine, detailSegmentCodeRule);
          memo.push(this.extractFields(detailLine, this.CONSTANTS.Segmentos[segmentCode]));
          return memo;
        }, []);
      }

      extractDetails(lotLines) {
        var detailsBulks, detailsWithSegments, lotHeaderLine, lotTrailingLine;
        lotHeaderLine = this.extractSection(lotLines, LOT_HEADER, FILE_SECTIONS.LOT_HEADER);
        lotTrailingLine = this.extractSection(lotLines, LOT_TRAILING, FILE_SECTIONS.LOT_TRAILING);
        detailsBulks = this.extractBulk(lotLines, _.find(this.rules.Detail, {
          field: this.CONSTANTS.Pagamento.REGISTRY_FIELD
        }), FILE_SECTIONS.DETAIL);
        detailsWithSegments = _.map(detailsBulks, this.extractSegments.bind(this));
        return {
          [`${LOT_HEADER}`]: this.extractFields(lotHeaderLine, LOT_HEADER),
          details: detailsWithSegments,
          [`${LOT_TRAILING}`]: this.extractFields(lotTrailingLine, LOT_TRAILING)
        };
      }

      extract(fileString) {
        var fileHeaderLine, fileTrailingLine, lines, lots, lotsWithSegments;
        // console.log fileString
        // sanitizedFileString = _.replace fileString, '\r\n', '\n'
        // console.log sanitizedFileString
        // lines = _.compact(sanitizedFileString.split '\n')
        // console.log lines
        lines = _.compact(fileString.split('\n'));
        fileHeaderLine = this.extractSection(lines, FILE_HEADER, FILE_SECTIONS.FILE_HEADER);
        fileTrailingLine = this.extractSection(lines, FILE_TRAILING, FILE_SECTIONS.FILE_TRAILING);
        lots = this.extractBulk(lines, _.find(this.rules.LoteHeader, {
          field: this.CONSTANTS.LoteHeader.REGISTRY_FIELD
        }), FILE_SECTIONS.LOT_HEADER);
        lotsWithSegments = _.map(lots, this.extractDetails.bind(this));
        return {
          [`${FILE_HEADER}`]: this.extractFields(fileHeaderLine, FILE_HEADER),
          lots: lotsWithSegments,
          [`${FILE_TRAILING}`]: this.extractFields(fileTrailingLine, FILE_TRAILING)
        };
      }

    };

    FILE_HEADER = 'ArquivoHeader';

    FILE_TRAILING = 'ArquivoTrailing';

    LOT_HEADER = 'LoteHeader';

    LOT_TRAILING = 'LoteTrailing';

    DETAIL = 'Detail';

    DETAIL2 = 'Detail2';

    FILE_SECTIONS = {
      FILE_HEADER: '0',
      LOT_HEADER: '1',
      DETAIL: 'A',
      LOT_TRAILING: '5',
      FILE_TRAILING: '9'
    };

    return Retorno;

  }).call(this);

  module.exports = Retorno;

}).call(this);
