// Generated by CoffeeScript 1.10.0
(function() {
  var Utils, _, expect, rules;

  rules = require('../rules/Rules');

  expect = require('expect.js');

  _ = require('lodash');

  Utils = (function() {
    function Utils(bank, type) {
      this.rules = {
        ArquivoHeader: rules[bank].ArquivoHeader,
        ArquivoTrailing: rules[bank].ArquivoTrailing,
        LoteHeader: rules[bank][type].LoteHeader,
        LoteTrailing: rules[bank][type].LoteTrailing,
        Detail: rules[bank][type].Detail
      };
    }

    Utils.prototype.getRequired = function() {
      var key, ref, required, results, subject;
      ref = this.rules;
      results = [];
      for (key in ref) {
        subject = ref[key];
        this._log('---------------------');
        this._log("Required for " + key);
        required = _.filter(subject, {
          required: true
        }).map(function(item) {
          var obj;
          if (item["default"] == null) {
            return (
              obj = {},
              obj["" + item.field] = _.pick(item, ['type', 'length', 'default']),
              obj
            );
          }
        });
        results.push(this._log(JSON.stringify(_.compact(required), null, 4)));
      }
      return results;
    };

    Utils.prototype.getAllFields = function() {
      var key, ref, required, results, subject;
      ref = this.rules;
      results = [];
      for (key in ref) {
        subject = ref[key];
        this._log('---------------------');
        this._log("Fields for " + key);
        results.push(required = _.map(subject, function(item) {
          var obj;
          return (
            obj = {},
            obj["" + item.field] = _.pick(item, ['type', 'length', 'default']),
            obj
          );
        }));
      }
      return results;
    };

    Utils.prototype.validate = function() {
      var key, ref, results, subject, total;
      ref = this.rules;
      results = [];
      for (key in ref) {
        subject = ref[key];
        expect(subject).not.to.be(void 0);
        this._log('---------------------');
        this._log("Testing " + key);
        total = _.reduce(subject, (function(_this) {
          return function(control, value) {
            _this._stdout("Testing field " + value.field + "... ");
            expect(value.startPos).to.be(control.lastPos + 1);
            expect(value.endPos - value.startPos + 1).to.be(value.length);
            _this._stdout("done.\n");
            control.lastPos = value.endPos;
            control.totalLength += value.length;
            return control;
          };
        })(this), {
          totalLength: 0,
          lastPos: 0
        });
        results.push(expect(total.totalLength).to.be(240));
      }
      return results;
    };

    Utils.prototype._log = function(msg) {};

    Utils.prototype._stdout = function(msg) {};

    return Utils;

  })();

  module.exports = Utils;

}).call(this);
